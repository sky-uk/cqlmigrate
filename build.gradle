plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'maven'
    id 'signing'
    id 'pl.allegro.tech.build.axion-release' version '1.10.0'
    id 'com.github.johnrengelman.shadow' version '5.0.0'
}

scmVersion {
    tag {
        prefix = ''
    }
}

group = 'uk.sky'
version = scmVersion.version

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

if (!project.hasProperty('ossrhUsername')) {
    ext.ossrhUsername = 'dummy'
}
if (!project.hasProperty('ossrhPassword')) {
    ext.ossrhPassword = 'dummy'
}

shadowJar {
    classifier = 'with-dependencies'
}

repositories {
    mavenCentral()
}

configurations {
    testCompileAndFunctional
    functional.extendsFrom(testCompileAndFunctional)
    testCompile.extendsFrom(testCompileAndFunctional)
}

dependencies {
    api('com.datastax.oss:java-driver-core:4.11.1')
    implementation('org.slf4j:slf4j-api:1.7.25')

    testImplementation("com.google.guava:guava:25.1-jre")
    testImplementation('org.apache.logging.log4j:log4j-core:2.11.2')
    testImplementation('junit:junit:4.12')
    testImplementation('org.assertj:assertj-core:3.12.2')
    testImplementation('org.mockito:mockito-core:2.25.1')
    testImplementation('org.powermock:powermock-api-mockito2:2.0.0')
    testImplementation('org.powermock:powermock-module-junit4:2.0.0')
    testImplementation('org.awaitility:awaitility:3.1.6')
    testImplementation('com.datastax.oss.simulacron:simulacron-driver-3x:0.11.0') {
        exclude group: 'com.datastax.oss', module: 'native-protocol'
    }

    testCompileAndFunctional('org.cassandraunit:cassandra-unit:4.3.1.0')
    functional('org.slf4j:slf4j-simple:1.7.25')
}

idea {
    module {
        downloadSources = true
    }
}

tasks.wrapper {
    gradleVersion = '5.3'
}
tasks.clean {
    // Remove temporary directory for embedded Cassandra
    delete("${projectDir}/target")
}

final sourcesJar = tasks.register('sourcesJar', Jar) {
    group = LifecycleBasePlugin.BUILD_GROUP
    classifier = 'sources'
    from(sourceSets.main.allJava)
}

final javadocJar = tasks.register('javadocJar', Jar) {
    group = LifecycleBasePlugin.BUILD_GROUP
    dependsOn(tasks.javadoc)
    classifier = 'javadoc'
    from(tasks.javadoc.destinationDir)
}

tasks.assemble {
    dependsOn(sourcesJar, javadocJar)
}

final testJar = tasks.register('testJar', Jar) {
    classifier = 'tests'
    from(sourceSets.main.output, sourceSets.test.output)
    from({
        (configurations.runtimeClasspath + configurations.functional).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    })
    manifest {
        attributes 'Main-Class': 'uk.sky.cqlmigrate.example.CmdLineEntryPoint'
    }
}

tasks.jar {
    manifest {
        attributes "Main-Class": "uk.sky.cqlmigrate.CqlMigratorImpl"
    }
}

final functional = tasks.register('functional') {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Functional test to run the migrateSchema on a jar containing embedded CQL files and have it return successfully.'
    mustRunAfter(tasks.test)
    final testJarOutputArchive = testJar.flatMap { it.archiveFile }
    final Provider<Directory> functionalOutputDir = project.layout.buildDirectory.dir(name)
    final Provider<RegularFile> upToDateCheckingFile = project.layout.buildDirectory.file("${name}-up-to-date.txt")
    // Explicit lambda casting required in Groovy due to https://github.com/gradle/gradle/issues/4238
    final Provider<Directory> cassandraStorageDir = functionalOutputDir.map((Transformer<Directory, Directory>) { it.dir('cassandra-storage') })
    inputs.file(testJarOutputArchive)
    outputs.file(upToDateCheckingFile)
    doFirst('run migrateSchema command on Jar containg embedded CQL files') {
        // '-jar' hack taken from https://github.com/gradle/gradle/issues/1346
        // 'javaexec' is used here instead of 'exec' to ensure that the same version of Gradle running the build
        // is also used to execute the functional tests.
        javaexec {
            main = '-jar'
            systemProperties += [
                'cassandra.storagedir': cassandraStorageDir.get()
            ]
            args = [
                testJarOutputArchive.get(),
                'migrateSchema'
            ]
        }
    }
    doLast('write file for up-to-date checking') {
        // Explicit lambda casting required in Groovy due to https://github.com/gradle/gradle/issues/4238
        final File toWrite = upToDateCheckingFile.map((Transformer<Directory, File>) { it.asFile }).get()
        toWrite.write('functional test success')
    }
}

tasks.check {
    dependsOn(functional, tasks.javadoc)
}

tasks.test {
    systemProperties += [
        'cassandra.storagedir': project.layout.buildDirectory.dir("$name/cassandra-data-dir").get().asFile
    ]
}

publishing {
    publications {
        artifacts(MavenPublication) {
            from(components.java)
            artifact(sourcesJar.get())
            artifact(javadocJar.get())
        }
        shadow(MavenPublication) {
            from(components.java)
            artifact(shadowJar)
        }
    }
}

artifacts {
    archives javadocJar, sourcesJar, shadowJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://s01.oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'cqlmigrate'
                packaging 'jar'
                description 'cqlmigrate is a library for performing schema migrations on a cassandra cluster'
                url 'https://github.com/sky-uk/cqlmigrate'

                scm {
                    connection 'scm:git:git@github.com:sky-uk/cqlmigrate.git'
                    developerConnection 'scm:git:git@github.com:sky-uk/cqlmigrate.git'
                    url 'https://github.com/sky-uk/cqlmigrate.git'
                }

                licenses {
                    license {
                        name 'BSD 3-clause "New" or "Revised" license'
                        url 'https://opensource.org/licenses/BSD-3-Clause'
                    }
                }

                developers {
                    developer {
                        id 'adamdougal'
                        name 'Adam Dougal'
                    }
                    developer {
                        id 'chuckydev'
                        name 'Charlie McNeill'
                    }
                    developer {
                        id 'tjuszczyk'
                        name 'Tomasz Juszczyk'
                    }
                    developer {
                        id 'michaelmcfadyensky'
                        name 'Michael McFadyen'
                    }
                    developer {
                        id 'davidh87'
                        name 'David Heath'
                    }
                    developer {
                        id 'alangibson01'
                        name 'Alan Gibson'
                    }
                }
            }
        }
    }
}
