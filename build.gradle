plugins {
    id 'java'
    id 'idea'
    id 'maven'
    id 'maven-publish'
    id 'com.jfrog.bintray' version '1.6'
    id 'pl.allegro.tech.build.axion-release' version '1.3.4'
    id 'com.github.johnrengelman.shadow' version '1.2.3'
}

scmVersion {
    tag {
        prefix = ''
    }
}

group = 'uk.sky'
version = scmVersion.version
sourceCompatibility = '1.8'
targetCompatibility = '1.8'

if (!project.hasProperty('openSourceRepoUser')) {
    ext.openSourceRepoUser = 'dummy'
}
if (!project.hasProperty('openSourceRepoPass')) {
    ext.openSourceRepoPass = 'dummy'
}

clean.doFirst {
    // Remove temporary directory for embedded Cassandra
    delete "${projectDir}/target"
}

bintray {
    user = project.property('openSourceRepoUser')
    key = project.property('openSourceRepoPass')
    publications = ['artifacts', 'shadow']
    pkg {
        userOrg = 'sky-uk'
        repo = 'oss-maven'
        name = project.name
        licenses = ['BSD 3-Clause']
        vcsUrl = 'https://github.com/sky-uk/cqlmigrate.git'
        version {
            name = scmVersion.version
            released = new Date()
            vcsTag = scmVersion.version
        }
    }
}

publishing {
    publications {
        artifacts(MavenPublication) {
            from components.java
            artifact sourcesJar
            artifact javadocJar
        }
        shadow(MavenPublication) {
            from components.java
            artifact shadowJar
        }
    }
}

shadowJar {
    classifier = 'with-dependencies'
}

repositories {
    mavenCentral()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.11'
}

configurations {
    testCompileAndFunctional
    functional.extendsFrom testCompileAndFunctional
    testCompile.extendsFrom testCompileAndFunctional
}

dependencies {
    compile 'com.datastax.cassandra:cassandra-driver-core:3.1.0'
    compile 'org.slf4j:slf4j-api:1.7.12'
    compile 'com.google.code.findbugs:jsr305:3.0.0'

    testCompile 'org.apache.logging.log4j:log4j-core:2.2'
    testCompile 'junit:junit:4.12'
    testCompile 'org.assertj:assertj-core:2.0.0'
    testCompile 'org.hamcrest:hamcrest-all:1.3'
    testCompile 'org.mockito:mockito-core:1.10.19'
    testCompile 'org.powermock:powermock-api-mockito:1.6.5'
    testCompile 'org.powermock:powermock-module-junit4:1.6.5'
    testCompile 'org.awaitility:awaitility:3.0.0'

    testCompile 'org.scassandra:java-client:1.0.3'

    testCompileAndFunctional 'org.cassandraunit:cassandra-unit:3.0.0.1'
    functional 'org.slf4j:slf4j-simple:1.7.12'
}

idea {
    module {
        downloadSources = true
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

task testJar (type: Jar) {
    classifier = 'tests'
    from (sourceSets.main.output, sourceSets.test.output)
    from {
        (configurations.runtime + configurations.functional).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    manifest {
        attributes 'Main-Class': 'uk.sky.cqlmigrate.example.CmdLineEntryPoint'
    }
}

jar {
    manifest {
        attributes "Main-Class": "uk.sky.cqlmigrate.CqlMigratorImpl"
    }
}

// Functional test is to run the migrateSchema on a jar containing embedded CQL files and have it return successfully.
task functional (dependsOn: ['testJar']) << {
    exec {
        executable = 'java'
        args = ['-jar', '-Dcassandra.storagedir=/tmp/cassandra', testJar.archivePath, 'migrateSchema']
    }
}

check.dependsOn(functional, javadoc)

test {
    jvmArgs '-Dcassandra.storagedir=/tmp/cassandra'
}
